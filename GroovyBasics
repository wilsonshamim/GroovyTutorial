
1. Groovy is very similar to java.
2. we create a groovy file and execute as java application.

3. first sample program:

package com.org

class First {
	static void main(String[] ar) {
		def a = 1
		println(a)
	// this is comments
	}
}

4. No semicolons in the groovy script.
5. return is optional

def props() {
    def m1 = "shamim"
    return m1
}


def props() {
    def m1 = "shamim"
    m1
}

------------------------------------------
6. Groovy allows you to omit the parentheses for top-level expressions, like with the println command:

println "Hello"
callmethod a, b
vs:

println("Hello")
method(a, b)

When a closure is the last parameter of a method call, like when using Groovy’s each{} iteration mechanism, you can put the closure outside the closing parentheses, and even omit the parentheses:

list.each( { println it } )
list.each(){ println it }
list.each  { println it }
Always prefer the third form, which is more natural, as an empty pair of parentheses is just useless syntactical noise!

In some cases parentheses are required, such as when making nested method calls or when calling a method without parameters.

---------------------

comments in groovy :

single line using //

and multiline using /* .... */

-----------------------------
When we declare a variable or function in Groovy, we can use the def keyword to define the type. ...
When we use Groovy def to declare something, it is similar to declaring it as an Object class. 
Because the class Object is the root class of all classes, 
you can assign anything to a variable of type Object

------------------------
Identifiers
Identifiers are used to define variables, functions or other user defined variables. 
Identifiers start with a letter, a dollar or an underscore. They cannot start with a number. Here are some examples of valid identifiers −

def employeename 
def student1 
def student_name

where def is a keyword used in Groovy to define an identifier.

-------------------
Keywords
Keywords as the name suggest are special words which are reserved in the Groovy Programming language. 
The following table lists the keywords which are defined in Groovy.

as	, assert,	break,	case, catch,	class,	const,	continue, def,	default	,do,	else, enum,	extends,	false,	Finally
for,	goto,	if,	implements, import,	in,	instanceof,	interface, new,	pull,	package,	return,super,	switch,	this,	throw, throws,
trait,	true,	try ,while	

-------------

Literals
A literal is a notation for representing a fixed value in groovy

12 
1.45 
‘a’ 
“aa”

Datatypes in groovy:
byte,
short
long
int
float
double
char
boolean
string

Class Numeric
Types In addition to the primitive types, the following object types (sometimes referred to as wrapper types) are allowed −

java.lang.Byte
java.lang.Short
java.lang.Integer
java.lang.Long
java.lang.Float
java.lang.Double
java.math.BigInteger
java.math.BigDecimal	

sample:
    int x = 10
		long y = 1L
		float aa = 1.7f
		double dd = 1
		java.lang.Double ddd = 22
		println(ddd)



Range Operator:
Groovy supports the concept of ranges and provides a notation of range operators with the help of the .. notation. 

void RangeDemo() {
	def v = 1..10;
	println(v) // 1..10
	println(v.get(index))
	v.forEach({println it})
}



-----------------------
GString:

Groovy has a String implementation called GString which allow to add variables into the String (so called String interpolation).

def x = "World"
println "Hello, $x"

This would produce the output Hello, World. The content of variable x is inserted into the string. If you want to use more complex statements in the string you need to add curly braces after the dollar sign, e.g.:

def firstName = "Douglas"
def name = "Adams"
println "Hello, ${firstName[0]}. $name"

This will produce the output Hello, D. Adams. I

---------------------------
